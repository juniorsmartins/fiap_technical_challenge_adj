spring:

  application:
    name: challenge_user

  datasource: # Configura o datasource do banco de dados.
    driver-class-name: org.postgresql.Driver # Especifica o driver JDBC (neste caso, para Postgres).
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:accounting} # Define a URL de conexão ao banco.
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}

  jpa: # Configura o JPA/Hibernate.
    database: POSTGRESQL # Especifica o banco usado.
    hibernate:
      ddl-auto: update # Define como o Hibernate gerencia o esquema do banco (usar none em produção).
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl # Define a estratégia de nomeação de tabelas/colunas.
    properties:
      hibernate: # Configurações avançadas do Hibernate.
        transaction:
          jta:
            platform: org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform
        format_sql: true # Formata as queries SQL para facilitar leitura.
        use_sql_comments: true # Adiciona comentários nas queries geradas.
        connection: # Define o nível de isolamento de transação.
          isolation: 2 # 2 é READ_COMMITTED
        cache:
          use_second_level_cache: false # Habilita cache de segundo nível
          use_query_cache: false # Habilita cache de query.
        type:
          enumType:
            type: pgsql_enum # Personalização para usar enums
        jdbc:
          log:
            non_contextual_creation: true # Ajuda a rastrear conexões criadas fora do contexto transacional (pode desligar em produção).
    open-in-view: false #  Define se o Hibernate deve manter a sessão aberta durante a renderização da view. O false é recomendado para evitar problemas de performance e lazy loading.
    show-sql: true

